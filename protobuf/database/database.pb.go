// Code generated by protoc-gen-go.
// source: database/database.proto
// DO NOT EDIT!

/*
Package database is a generated protocol buffer package.

It is generated from these files:
	database/database.proto

It has these top-level messages:
	DataEntry
*/
package database

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "google.golang.org/genproto/googleapis/api/annotations"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type DataEntry struct {
	Key   string `protobuf:"bytes,1,opt,name=key" json:"key,omitempty"`
	Value string `protobuf:"bytes,2,opt,name=value" json:"value,omitempty"`
}

func (m *DataEntry) Reset()                    { *m = DataEntry{} }
func (m *DataEntry) String() string            { return proto.CompactTextString(m) }
func (*DataEntry) ProtoMessage()               {}
func (*DataEntry) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *DataEntry) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

func (m *DataEntry) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

func init() {
	proto.RegisterType((*DataEntry)(nil), "database.DataEntry")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for DatabaseManager service

type DatabaseManagerClient interface {
	SetDatabaseInfo(ctx context.Context, in *DataEntry, opts ...grpc.CallOption) (*DataEntry, error)
	GetDatabaseInfo(ctx context.Context, in *DataEntry, opts ...grpc.CallOption) (*DataEntry, error)
}

type databaseManagerClient struct {
	cc *grpc.ClientConn
}

func NewDatabaseManagerClient(cc *grpc.ClientConn) DatabaseManagerClient {
	return &databaseManagerClient{cc}
}

func (c *databaseManagerClient) SetDatabaseInfo(ctx context.Context, in *DataEntry, opts ...grpc.CallOption) (*DataEntry, error) {
	out := new(DataEntry)
	err := grpc.Invoke(ctx, "/database.DatabaseManager/SetDatabaseInfo", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *databaseManagerClient) GetDatabaseInfo(ctx context.Context, in *DataEntry, opts ...grpc.CallOption) (*DataEntry, error) {
	out := new(DataEntry)
	err := grpc.Invoke(ctx, "/database.DatabaseManager/GetDatabaseInfo", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for DatabaseManager service

type DatabaseManagerServer interface {
	SetDatabaseInfo(context.Context, *DataEntry) (*DataEntry, error)
	GetDatabaseInfo(context.Context, *DataEntry) (*DataEntry, error)
}

func RegisterDatabaseManagerServer(s *grpc.Server, srv DatabaseManagerServer) {
	s.RegisterService(&_DatabaseManager_serviceDesc, srv)
}

func _DatabaseManager_SetDatabaseInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DataEntry)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatabaseManagerServer).SetDatabaseInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/database.DatabaseManager/SetDatabaseInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatabaseManagerServer).SetDatabaseInfo(ctx, req.(*DataEntry))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatabaseManager_GetDatabaseInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DataEntry)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatabaseManagerServer).GetDatabaseInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/database.DatabaseManager/GetDatabaseInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatabaseManagerServer).GetDatabaseInfo(ctx, req.(*DataEntry))
	}
	return interceptor(ctx, in, info, handler)
}

var _DatabaseManager_serviceDesc = grpc.ServiceDesc{
	ServiceName: "database.DatabaseManager",
	HandlerType: (*DatabaseManagerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SetDatabaseInfo",
			Handler:    _DatabaseManager_SetDatabaseInfo_Handler,
		},
		{
			MethodName: "GetDatabaseInfo",
			Handler:    _DatabaseManager_GetDatabaseInfo_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "database/database.proto",
}

func init() { proto.RegisterFile("database/database.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 201 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xe2, 0x12, 0x4f, 0x49, 0x2c, 0x49,
	0x4c, 0x4a, 0x2c, 0x4e, 0xd5, 0x87, 0x31, 0xf4, 0x0a, 0x8a, 0xf2, 0x4b, 0xf2, 0x85, 0x38, 0x60,
	0x7c, 0x29, 0x99, 0xf4, 0xfc, 0xfc, 0xf4, 0x9c, 0x54, 0xfd, 0xc4, 0x82, 0x4c, 0xfd, 0xc4, 0xbc,
	0xbc, 0xfc, 0x92, 0xc4, 0x92, 0xcc, 0xfc, 0xbc, 0x62, 0x88, 0x3a, 0x25, 0x63, 0x2e, 0x4e, 0x17,
	0xa0, 0x4a, 0xd7, 0xbc, 0x92, 0xa2, 0x4a, 0x21, 0x01, 0x2e, 0xe6, 0xec, 0xd4, 0x4a, 0x09, 0x46,
	0x05, 0x46, 0x0d, 0xce, 0x20, 0x10, 0x53, 0x48, 0x84, 0x8b, 0xb5, 0x2c, 0x31, 0xa7, 0x34, 0x55,
	0x82, 0x09, 0x2c, 0x06, 0xe1, 0x18, 0x9d, 0x66, 0xe4, 0xe2, 0x77, 0x81, 0x9a, 0xef, 0x9b, 0x98,
	0x97, 0x98, 0x9e, 0x5a, 0x24, 0x14, 0xcf, 0xc5, 0x1f, 0x9c, 0x5a, 0x02, 0x13, 0xf5, 0xcc, 0x4b,
	0xcb, 0x17, 0x12, 0xd6, 0x83, 0x3b, 0x0a, 0x6e, 0x87, 0x14, 0x36, 0x41, 0x25, 0xa5, 0xa6, 0xcb,
	0x4f, 0x26, 0x33, 0xc9, 0x28, 0x49, 0xe9, 0x97, 0x19, 0xc2, 0x7d, 0xa2, 0x5f, 0x0d, 0x74, 0x41,
	0xad, 0x7e, 0x35, 0xd8, 0xce, 0x5a, 0xa1, 0x70, 0x2e, 0x7e, 0x77, 0xb2, 0x2d, 0x90, 0x02, 0x5b,
	0x20, 0x22, 0x24, 0x84, 0x69, 0x41, 0x12, 0x1b, 0x38, 0x24, 0x8c, 0x01, 0x01, 0x00, 0x00, 0xff,
	0xff, 0xfe, 0xbd, 0xfd, 0x37, 0x4c, 0x01, 0x00, 0x00,
}
