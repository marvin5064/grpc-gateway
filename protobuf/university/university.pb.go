// Code generated by protoc-gen-go.
// source: university/university.proto
// DO NOT EDIT!

/*
Package university is a generated protocol buffer package.

It is generated from these files:
	university/university.proto

It has these top-level messages:
	Professor
	Course
	Student
	GetEntityInfoRequest
*/
package university

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Gender int32

const (
	Gender_UNKNOWN_GENDER Gender = 0
	Gender_MALE           Gender = 1
	Gender_FEMALE         Gender = 2
)

var Gender_name = map[int32]string{
	0: "UNKNOWN_GENDER",
	1: "MALE",
	2: "FEMALE",
}
var Gender_value = map[string]int32{
	"UNKNOWN_GENDER": 0,
	"MALE":           1,
	"FEMALE":         2,
}

func (x Gender) String() string {
	return proto.EnumName(Gender_name, int32(x))
}
func (Gender) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type Professor struct {
	Id     string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	Name   string `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	Gender Gender `protobuf:"varint,3,opt,name=gender,enum=university.Gender" json:"gender,omitempty"`
	Age    uint32 `protobuf:"varint,4,opt,name=age" json:"age,omitempty"`
}

func (m *Professor) Reset()                    { *m = Professor{} }
func (m *Professor) String() string            { return proto.CompactTextString(m) }
func (*Professor) ProtoMessage()               {}
func (*Professor) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Professor) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Professor) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Professor) GetGender() Gender {
	if m != nil {
		return m.Gender
	}
	return Gender_UNKNOWN_GENDER
}

func (m *Professor) GetAge() uint32 {
	if m != nil {
		return m.Age
	}
	return 0
}

type Course struct {
	Id         string       `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	Name       string       `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	Professors []*Professor `protobuf:"bytes,3,rep,name=professors" json:"professors,omitempty"`
}

func (m *Course) Reset()                    { *m = Course{} }
func (m *Course) String() string            { return proto.CompactTextString(m) }
func (*Course) ProtoMessage()               {}
func (*Course) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *Course) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Course) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Course) GetProfessors() []*Professor {
	if m != nil {
		return m.Professors
	}
	return nil
}

type Student struct {
	Id              string    `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	Gender          Gender    `protobuf:"varint,2,opt,name=gender,enum=university.Gender" json:"gender,omitempty"`
	Name            string    `protobuf:"bytes,3,opt,name=name" json:"name,omitempty"`
	Age             uint32    `protobuf:"varint,4,opt,name=age" json:"age,omitempty"`
	RegistedCourses []*Course `protobuf:"bytes,5,rep,name=registed_courses,json=registedCourses" json:"registed_courses,omitempty"`
}

func (m *Student) Reset()                    { *m = Student{} }
func (m *Student) String() string            { return proto.CompactTextString(m) }
func (*Student) ProtoMessage()               {}
func (*Student) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *Student) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Student) GetGender() Gender {
	if m != nil {
		return m.Gender
	}
	return Gender_UNKNOWN_GENDER
}

func (m *Student) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Student) GetAge() uint32 {
	if m != nil {
		return m.Age
	}
	return 0
}

func (m *Student) GetRegistedCourses() []*Course {
	if m != nil {
		return m.RegistedCourses
	}
	return nil
}

type GetEntityInfoRequest struct {
	Id string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
}

func (m *GetEntityInfoRequest) Reset()                    { *m = GetEntityInfoRequest{} }
func (m *GetEntityInfoRequest) String() string            { return proto.CompactTextString(m) }
func (*GetEntityInfoRequest) ProtoMessage()               {}
func (*GetEntityInfoRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *GetEntityInfoRequest) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func init() {
	proto.RegisterType((*Professor)(nil), "university.Professor")
	proto.RegisterType((*Course)(nil), "university.Course")
	proto.RegisterType((*Student)(nil), "university.Student")
	proto.RegisterType((*GetEntityInfoRequest)(nil), "university.GetEntityInfoRequest")
	proto.RegisterEnum("university.Gender", Gender_name, Gender_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for UniversityManager service

type UniversityManagerClient interface {
	GetStudentInfo(ctx context.Context, in *GetEntityInfoRequest, opts ...grpc.CallOption) (*Student, error)
	GetCourseInfo(ctx context.Context, in *GetEntityInfoRequest, opts ...grpc.CallOption) (*Course, error)
	GetProfessorInfo(ctx context.Context, in *GetEntityInfoRequest, opts ...grpc.CallOption) (*Professor, error)
}

type universityManagerClient struct {
	cc *grpc.ClientConn
}

func NewUniversityManagerClient(cc *grpc.ClientConn) UniversityManagerClient {
	return &universityManagerClient{cc}
}

func (c *universityManagerClient) GetStudentInfo(ctx context.Context, in *GetEntityInfoRequest, opts ...grpc.CallOption) (*Student, error) {
	out := new(Student)
	err := grpc.Invoke(ctx, "/university.UniversityManager/GetStudentInfo", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *universityManagerClient) GetCourseInfo(ctx context.Context, in *GetEntityInfoRequest, opts ...grpc.CallOption) (*Course, error) {
	out := new(Course)
	err := grpc.Invoke(ctx, "/university.UniversityManager/GetCourseInfo", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *universityManagerClient) GetProfessorInfo(ctx context.Context, in *GetEntityInfoRequest, opts ...grpc.CallOption) (*Professor, error) {
	out := new(Professor)
	err := grpc.Invoke(ctx, "/university.UniversityManager/GetProfessorInfo", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for UniversityManager service

type UniversityManagerServer interface {
	GetStudentInfo(context.Context, *GetEntityInfoRequest) (*Student, error)
	GetCourseInfo(context.Context, *GetEntityInfoRequest) (*Course, error)
	GetProfessorInfo(context.Context, *GetEntityInfoRequest) (*Professor, error)
}

func RegisterUniversityManagerServer(s *grpc.Server, srv UniversityManagerServer) {
	s.RegisterService(&_UniversityManager_serviceDesc, srv)
}

func _UniversityManager_GetStudentInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetEntityInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UniversityManagerServer).GetStudentInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/university.UniversityManager/GetStudentInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UniversityManagerServer).GetStudentInfo(ctx, req.(*GetEntityInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UniversityManager_GetCourseInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetEntityInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UniversityManagerServer).GetCourseInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/university.UniversityManager/GetCourseInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UniversityManagerServer).GetCourseInfo(ctx, req.(*GetEntityInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UniversityManager_GetProfessorInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetEntityInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UniversityManagerServer).GetProfessorInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/university.UniversityManager/GetProfessorInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UniversityManagerServer).GetProfessorInfo(ctx, req.(*GetEntityInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _UniversityManager_serviceDesc = grpc.ServiceDesc{
	ServiceName: "university.UniversityManager",
	HandlerType: (*UniversityManagerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetStudentInfo",
			Handler:    _UniversityManager_GetStudentInfo_Handler,
		},
		{
			MethodName: "GetCourseInfo",
			Handler:    _UniversityManager_GetCourseInfo_Handler,
		},
		{
			MethodName: "GetProfessorInfo",
			Handler:    _UniversityManager_GetProfessorInfo_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "university/university.proto",
}

func init() { proto.RegisterFile("university/university.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 357 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x8c, 0x92, 0x41, 0x4f, 0xea, 0x40,
	0x14, 0x85, 0x69, 0xcb, 0xeb, 0x7b, 0xdc, 0x17, 0x6a, 0x1d, 0x35, 0x69, 0x74, 0x43, 0xba, 0x30,
	0x84, 0x05, 0x26, 0x35, 0x2e, 0x5d, 0x18, 0xad, 0x0d, 0x51, 0xaa, 0x19, 0x43, 0x5c, 0x12, 0xa4,
	0x17, 0xd2, 0x05, 0x53, 0x9c, 0x99, 0x9a, 0xf8, 0x97, 0xfc, 0x81, 0xae, 0x1d, 0x06, 0x0a, 0x25,
	0x25, 0x91, 0xdd, 0xe9, 0xf4, 0xf4, 0x9c, 0xef, 0xde, 0x0e, 0x9c, 0xe5, 0x2c, 0xfd, 0x40, 0x2e,
	0x52, 0xf9, 0x79, 0xb1, 0x91, 0xdd, 0x39, 0xcf, 0x64, 0x46, 0x60, 0x73, 0xe2, 0xcf, 0xa0, 0xf1,
	0xcc, 0xb3, 0x09, 0x0a, 0x91, 0x71, 0xe2, 0x80, 0x99, 0x26, 0x9e, 0xd1, 0x32, 0xda, 0x0d, 0xaa,
	0x14, 0x21, 0x50, 0x67, 0xa3, 0x19, 0x7a, 0xa6, 0x3e, 0xd1, 0x9a, 0x74, 0xc0, 0x9e, 0x22, 0x4b,
	0x90, 0x7b, 0x96, 0x3a, 0x75, 0x02, 0xd2, 0x2d, 0xe5, 0x47, 0xfa, 0x0d, 0x5d, 0x39, 0x88, 0x0b,
	0xd6, 0x68, 0x8a, 0x5e, 0x5d, 0x19, 0x9b, 0x74, 0x21, 0xfd, 0x31, 0xd8, 0xb7, 0x59, 0xce, 0x05,
	0xee, 0xd5, 0x75, 0x05, 0x30, 0x2f, 0xe0, 0x84, 0xea, 0xb3, 0xda, 0xff, 0x83, 0x93, 0x72, 0xdf,
	0x1a, 0x9d, 0x96, 0x8c, 0xfe, 0x97, 0x01, 0x7f, 0x5f, 0x64, 0x9e, 0x20, 0x93, 0x95, 0x9a, 0x0d,
	0xbe, 0xf9, 0x2b, 0x7e, 0x81, 0x64, 0x95, 0x90, 0x2a, 0x23, 0x91, 0x6b, 0x70, 0x39, 0x4e, 0x53,
	0x21, 0x31, 0x19, 0x8e, 0xf5, 0x6c, 0xc2, 0xfb, 0xa3, 0x51, 0xb7, 0xb2, 0x97, 0x63, 0xd3, 0x83,
	0xc2, 0xbb, 0x7c, 0x16, 0xfe, 0x39, 0x1c, 0x47, 0x28, 0x43, 0x26, 0x95, 0xa9, 0xc7, 0x26, 0x19,
	0xc5, 0xf7, 0x1c, 0x45, 0x05, 0xbc, 0x13, 0x80, 0x1d, 0x15, 0x58, 0xce, 0x20, 0x7e, 0x88, 0x9f,
	0x5e, 0xe3, 0x61, 0x14, 0xc6, 0x77, 0x21, 0x75, 0x6b, 0xe4, 0x1f, 0xd4, 0xfb, 0x37, 0x8f, 0xa1,
	0x6b, 0x10, 0x00, 0xfb, 0x3e, 0xd4, 0xda, 0x0c, 0xbe, 0x0d, 0x38, 0x1c, 0xac, 0x11, 0xfa, 0x23,
	0xa6, 0x78, 0x39, 0xe9, 0x81, 0xa3, 0x1a, 0x57, 0x0b, 0x5a, 0x54, 0x92, 0xd6, 0xf6, 0x12, 0xaa,
	0x34, 0xa7, 0x47, 0x65, 0xc7, 0xea, 0x53, 0xbf, 0x46, 0x22, 0x68, 0x2a, 0xfb, 0x72, 0x94, 0x3d,
	0x93, 0x76, 0x2c, 0x45, 0x05, 0xf5, 0xc1, 0x55, 0xee, 0xf5, 0xef, 0xdc, 0x33, 0x6b, 0xf7, 0x5d,
	0xf0, 0x6b, 0x6f, 0xb6, 0xbe, 0xe8, 0x97, 0x3f, 0x01, 0x00, 0x00, 0xff, 0xff, 0x80, 0x13, 0x1a,
	0x4e, 0x07, 0x03, 0x00, 0x00,
}
